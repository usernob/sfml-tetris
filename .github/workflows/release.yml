name: Release Build

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Set OS short name
        id: os
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "os_short=windows" >> "$GITHUB_OUTPUT"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "os_short=macos" >> "$GITHUB_OUTPUT"
          else
            echo "os_short=linux" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Check if pre-release
        id: prerelease
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$TAG" == *-alpha* || "$TAG" == *-beta* || "$TAG" == *-rc* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=FALSE

      - name: Build
        run: cmake --build build --config Release

      - name: Archive
        run: |
          OS_SHORT=${{ steps.os.outputs.os_short }}
          VERSION=${{ steps.version.outputs.version }}

          cd build/bin

          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cmake -E tar cfvz ../sfml-tetris-${OS_SHORT}-v${VERSION}.tar.gz --format=gnutar .
          else
            cmake -E tar cfv ../sfml-tetris-${OS_SHORT}-v${VERSION}.zip --format=zip .
          fi
        shell: bash

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/sfml-tetris-*.zip
            build/sfml-tetris-*.tar.gz
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
